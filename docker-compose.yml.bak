version: '3.8'

services:
  # Database service
  db:
    image: postgres:14-alpine # Use alpine for smaller footprint
    ports:
      - "5432:5432"
    volumes:
      - ./database/pgdata:/var/lib/postgresql/data # Use local directory instead of named volume
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=camera_system
      # Reduce memory usage
      - POSTGRES_SHARED_BUFFERS=32MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=64MB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=16MB
    command: >
      postgres
      -c shared_buffers=32MB
      -c effective_cache_size=64MB
      -c work_mem=4MB
      -c maintenance_work_mem=16MB
      -c max_connections=10
      -c fsync=off
      -c synchronous_commit=off
      -c full_page_writes=off
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.5'
    networks:
      - pose-network
    restart: unless-stopped

  camera-manager:
    build: 
      context: .
      dockerfile: camera_manager/Dockerfile
    ports:
      - "8010:8010"
    volumes:
      - ./output_image:/app/output_image:rw
      - ./camera_manager/config:/app/camera_manager/config:rw
      - ./logs:/app/logs:rw
      - ./videos:/app/videos:ro  # Mount videos folder for local video files
    environment:
      - POSE_SERVICE_URL=http://detector-pose:8011/pose/image
      - DETECTION_SERVICE_URL=http://detector-detections:8013/detect/image
      - PYTHONPATH=/app
      - CONFIG_DIR=/app/camera_manager/config
      - OUTPUT_DIR=/app/output_image
      - LOG_DIR=/app/logs
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/camera_system
    depends_on:
      - detector-pose
      - detector-detections
    restart: unless-stopped
    networks:
      - pose-network
      
  detector-pose:
    build: 
      context: .
      dockerfile: detector_pose/Dockerfile
    ports:
      - "8011:8011"
    volumes:
      - ./output_image:/app/output_image:rw
      - ./logs:/app/logs:rw
    environment:
      - ALERT_SERVICE_URL=http://alert-logic:8012/alert
      - PYTHONPATH=/app
      - OUTPUT_DIR=/app/output_image
      - LOG_DIR=/app/logs
    networks:
      - pose-network

  detector-detections:
    build: 
      context: .
      dockerfile: detector_detections/Dockerfile
    ports:
      - "8013:8013"
    volumes:
      - ./output_image:/app/output_image:rw
      - ./logs:/app/logs:rw
    environment:
      - ALERT_SERVICE_URL=http://alert-logic:8012/alert
      - PYTHONPATH=/app
      - OUTPUT_DIR=/app/output_image
      - LOG_DIR=/app/logs
    networks:
      - pose-network

  alert-logic:
    build: 
      context: .
      dockerfile: alert_logic/Dockerfile
    ports:
      - "8012:8012"
    volumes:
      - ./output_image:/app/output_image:rw
      - ./logs:/app/logs:rw
    environment:
      - PYTHONPATH=/app
      - OUTPUT_DIR=/app/output_image
      - LOG_DIR=/app/logs
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/camera_system
    depends_on:
      - db
      
  ui-service:
    build:
      context: .
      dockerfile: ui_service/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - ALERT_SERVICE_URL=http://alert-logic:8012
      - CAMERA_SERVICE_URL=http://camera-manager:8010
    depends_on:
      - alert-logic
      - camera-manager
    networks:
      - pose-network

# Camera-orchestrator service has been replaced by camera-manager

networks:
  pose-network:

# Define volumes properly even if we're not using named volumes
volumes:
  postgres_data: {}
